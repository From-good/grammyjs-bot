require('dotenv').config();
const { Bot, GrammyError, HttpError, Keyboard, InlineKeyboard } = require('grammy');
const { session } = require('grammy');

// --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
const MAX_FILE_SIZE_BYTES = 20 * 1024 * 1024;
const BOT_API_KEY = process.env.BOT_API_KEY;
const ADMIN_CHAT_ID = Number(process.env.ADMIN_CHAT_ID);

if (!BOT_API_KEY) {
  throw new Error('BOT_API_KEY –Ω–µ –∑–∞–¥–∞–Ω –≤ .env —Ñ–∞–π–ª–µ.');
}
if (isNaN(ADMIN_CHAT_ID)) {
  throw new Error('ADMIN_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º –≤ .env —Ñ–∞–π–ª–µ.');
}
// --- –ö–æ–Ω–µ—Ü –±–ª–æ–∫–∞ –∫–æ–Ω—Å—Ç–∞–Ω—Ç ---

const bot = new Bot(BOT_API_KEY);

bot.use(session({
  initial: () => ({
    isFirstMessageSent: false,
    isDialogueStarted: false,
    chatHistory: []
  }),
}));

const mainKeyboard = new Keyboard()
  .text('–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç üåê')
  .row()
  .text('–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã üìû')
  .resized()
  .persistent();

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
const sendInitialMessage = async (ctx) => {
  if (!ctx.session.isFirstMessageSent) {
    await ctx.reply('–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! –ú—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏. üôè');
    ctx.session.isFirstMessageSent = true;
  }
};

const getUserInfo = (ctx) => {
  const userId = ctx.from?.id;
  const userName = ctx.from?.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
  return { userId, userName };
};

const checkFileSize = async (ctx, file) => {
  if (file.file_size > MAX_FILE_SIZE_BYTES) {
    await ctx.replyWithChatAction('typing');
    await ctx.reply(`–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. üò• –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ ‚Äî ${MAX_FILE_SIZE_BYTES / 1024 / 1024} –ú–ë.`);
    return false;
  }
  return true;
};

// ---- MIDDLEWARE ----

// Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
const adminReplyMiddleware = async (ctx, next) => {
  const isReplyToBot = ctx.message.reply_to_message?.from?.id === bot.botInfo.id;
  
  if (ctx.from?.id === ADMIN_CHAT_ID && isReplyToBot) {
    // üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –¢–µ–ø–µ—Ä—å –∏—â–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤ —Ç–µ–∫—Å—Ç–µ, –∏ –≤ –ø–æ–¥–ø–∏—Å–∏ (caption)
    const repliedMessageText = ctx.message.reply_to_message.text || ctx.message.reply_to_message.caption;
    const userIdMatch = repliedMessageText?.match(/ID: `(\d+)`/);
    const targetUserId = userIdMatch && Number(userIdMatch[1]);
    
    if (userIdMatch && !isNaN(targetUserId)) {
      const messageToClient = ctx.message.text;
      try {
        await bot.api.sendMessage(targetUserId, `*–û—Ç–≤–µ—Ç –æ—Ç FromGood:*\n\n${messageToClient}`, { parse_mode: 'Markdown' });
        await ctx.reply('–û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É. ‚úÖ', {
          reply_to_message_id: ctx.message.message_id
        });
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –∫–ª–∏–µ–Ω—Ç—É:', error);
        await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É. ‚ùå –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.', {
          reply_to_message_id: ctx.message.message_id
        });
      }
    } else {
      await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –æ—Ç–≤–µ—á–∞–µ—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å–æ–¥–µ—Ä–∂–∞—â–µ–µ ID –∫–ª–∏–µ–Ω—Ç–∞.', {
        reply_to_message_id: ctx.message.message_id
      });
    }
  } else {
    await next();
  }
};

// --- –û–°–ù–û–í–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ---

bot.command('start', async (ctx) => {
  await ctx.replyWithChatAction('typing');
  await new Promise(resolve => setTimeout(resolve, 1000));
  await ctx.reply('–ü—Ä–∏–≤–µ—Ç üëã! –ù–∞–ø–∏—à–∏ –Ω–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω—É–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.', {
    reply_markup: mainKeyboard
  });
});

bot.hears('–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç üåê', async (ctx) => {
  await ctx.replyWithChatAction('typing');
  await ctx.reply('–û—Ç–ª–∏—á–Ω–æ! –í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –Ω–∞—à —Å–∞–π—Ç: https://fromgood.ru');
});

bot.hears('–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã üìû', async (ctx) => {
  await ctx.replyWithChatAction('typing');
  await ctx.reply('–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã: info@fromgood.ru, +7 (495) 973-31-39');
});

bot.callbackQuery(/^reply_to_(\d+)$/, async (ctx) => {
    const targetUserId = Number(ctx.match[1]);
    await ctx.answerCallbackQuery();
    
    // ‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –æ –ø—Ä–æ—á—Ç–µ–Ω–∏–∏
    await bot.api.sendMessage(targetUserId, '‚úÖ *–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≥–æ—Ç–æ–≤–∏—Ç –æ—Ç–≤–µ—Ç.*', { parse_mode: 'Markdown' });

    // üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–∏–ª –ø—Ä–æ–±–µ–ª –º–µ–∂–¥—É `ID: ` –∏ `userId`, –∞ —Ç–∞–∫–∂–µ –æ–±—Ä–∞—Ç–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ (`), —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å –ø–∞—Ä—Å–µ—Ä–æ–º Markdown.
    await ctx.reply(`–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (ID: \`${targetUserId}\`):`);
    
    if (ctx.session.isDialogueStarted !== true) {
      await bot.api.sendMessage(targetUserId, 'üí¨ *–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–∞—á–∞–ª –¥–∏–∞–ª–æ–≥ —Å –≤–∞–º–∏.*', { parse_mode: 'Markdown' });
      ctx.session.isDialogueStarted = true;
    }
});

// –ï–¥–∏–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –∫–ª–∏–µ–Ω—Ç–æ–≤
bot.on(['message:text', 'message:photo', 'message:document', 'message:video', 'message:animation', 'message:audio', 'message:sticker', 'message:voice', 'message:video_note'], async (ctx) => {
  const { userId, userName } = getUserInfo(ctx);
  
  if (userId === ADMIN_CHAT_ID) {
    return;
  }
  
  await sendInitialMessage(ctx);
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
  const messageText = ctx.message.text || `_–º–µ–¥–∏–∞—Ñ–∞–π–ª (${Object.keys(ctx.message).filter(k => ['photo', 'document', 'video', 'animation', 'audio', 'sticker', 'voice', 'video_note'].includes(k))})_`;
  const newMessage = {
    from: userName,
    text: messageText,
    timestamp: new Date().toLocaleTimeString('ru-RU')
  };
  ctx.session.chatHistory.push(newMessage);

  // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–æ 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  if (ctx.session.chatHistory.length > 5) {
      ctx.session.chatHistory.shift(); 
  }

  // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
  const formattedHistory = ctx.session.chatHistory
      .map(msg => `*${msg.from}* _(${msg.timestamp})_:\n${msg.text}`)
      .join('\n\n---\n\n');

  const inlineKeyboard = new InlineKeyboard().text('–û—Ç–≤–µ—Ç–∏—Ç—å', `reply_to_${userId}`);
  
  // üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º `ID: \`${userId}\`` –¥–ª—è –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
  let caption = `üìú *–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞*:\n\n${formattedHistory}\n\n======================\n\n‚úçÔ∏è *–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${userName}* (ID: \`${userId}\`):`;
  let fileId = null;

  if (ctx.message.text) {
    caption += `\n\n"${ctx.message.text}"`;
    await bot.api.sendMessage(ADMIN_CHAT_ID, caption, { reply_markup: inlineKeyboard, parse_mode: 'Markdown' });
  } else if (ctx.message.photo) {
    fileId = ctx.message.photo[ctx.message.photo.length - 1].file_id;
    if (!await checkFileSize(ctx, ctx.message.photo[ctx.message.photo.length - 1])) return;
    caption += `\n\n_–ù–æ–≤–æ–µ —Ñ–æ—Ç–æ_`;
    if (ctx.message.caption) caption += `\n\n${ctx.message.caption}`;
    await bot.api.sendPhoto(ADMIN_CHAT_ID, fileId, { caption, reply_markup: inlineKeyboard, parse_mode: 'Markdown' });
  } else if (ctx.message.document) {
    fileId = ctx.message.document.file_id;
    if (!await checkFileSize(ctx, ctx.message.document)) return;
    caption += `\n\n_–ù–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç_`;
    if (ctx.message.caption) caption += `\n\n${ctx.message.caption}`;
    await bot.api.sendDocument(ADMIN_CHAT_ID, fileId, { caption, reply_markup: inlineKeyboard, parse_mode: 'Markdown' });
  } else if (ctx.message.video) {
    fileId = ctx.message.video.file_id;
    if (!await checkFileSize(ctx, ctx.message.video)) return;
    caption += `\n\n_–ù–æ–≤–æ–µ –≤–∏–¥–µ–æ_`;
    if (ctx.message.caption) caption += `\n\n${ctx.message.caption}`;
    await bot.api.sendVideo(ADMIN_CHAT_ID, fileId, { caption, reply_markup: inlineKeyboard, parse_mode: 'Markdown' });
  } else if (ctx.message.animation) {
    fileId = ctx.message.animation.file_id;
    if (!await checkFileSize(ctx, ctx.message.animation)) return;
    caption += `\n\n_–ù–æ–≤–∞—è GIF-–∞–Ω–∏–º–∞—Ü–∏—è_`;
    if (ctx.message.caption) caption += `\n\n${ctx.message.caption}`;
    await bot.api.sendAnimation(ADMIN_CHAT_ID, fileId, { caption, reply_markup: inlineKeyboard, parse_mode: 'Markdown' });
  } else if (ctx.message.audio) {
    fileId = ctx.message.audio.file_id;
    if (!await checkFileSize(ctx, ctx.message.audio)) return;
    caption += `\n\n_–ù–æ–≤—ã–π –∞—É–¥–∏–æ—Ñ–∞–π–ª_`;
    if (ctx.message.caption) caption += `\n\n${ctx.message.caption}`;
    await bot.api.sendAudio(ADMIN_CHAT_ID, fileId, { caption, reply_markup: inlineKeyboard, parse_mode: 'Markdown' });
  } else if (ctx.message.sticker) {
    fileId = ctx.message.sticker.file_id;
    if (!await checkFileSize(ctx, ctx.message.sticker)) return;
    await bot.api.sendSticker(ADMIN_CHAT_ID, fileId);
    caption += `\n\n_–ù–æ–≤—ã–π —Å—Ç–∏–∫–µ—Ä_`;
    await bot.api.sendMessage(ADMIN_CHAT_ID, caption, { reply_markup: inlineKeyboard, parse_mode: 'Markdown' });
  } else if (ctx.message.voice) {
    fileId = ctx.message.voice.file_id;
    if (!await checkFileSize(ctx, ctx.message.voice)) return;
    caption += `\n\n_–ù–æ–≤–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ_`;
    await bot.api.sendVoice(ADMIN_CHAT_ID, fileId, { caption, reply_markup: inlineKeyboard, parse_mode: 'Markdown' });
  } else if (ctx.message.video_note) {
    fileId = ctx.message.video_note.file_id;
    if (!await checkFileSize(ctx, ctx.message.video_note)) return;
    await bot.api.sendVideoNote(ADMIN_CHAT_ID, fileId);
    caption += `\n\n_–ù–æ–≤–∞—è –≤–∏–¥–µ–æ–∑–∞–º–µ—Ç–∫–∞_`;
    await bot.api.sendMessage(ADMIN_CHAT_ID, caption, { reply_markup: inlineKeyboard, parse_mode: 'Markdown' });
  }
});

// –ü—Ä–∏–º–µ–Ω—è–µ–º middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
bot.on('message:text', adminReplyMiddleware);

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
bot.catch(async (err) => {
  const ctx = err.ctx;
  console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ${ctx.update.update_id}:`);
  const e = err.error;

  let errorText = 'üö® *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞!* üö®\n\n';

  if (e instanceof GrammyError) {
    errorText += `**–¢–∏–ø –æ—à–∏–±–∫–∏:** –û—à–∏–±–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ\n`;
    errorText += `**–û–ø–∏—Å–∞–Ω–∏–µ:** \`${e.description}\`\n`;
    errorText += `**–ö–æ–¥ –æ—à–∏–±–∫–∏:** \`${e.error_code}\`\n`;
  } else if (e instanceof HttpError) {
    errorText += `**–¢–∏–ø –æ—à–∏–±–∫–∏:** –û—à–∏–±–∫–∞ HTTP-–∑–∞–ø—Ä–æ—Å–∞\n`;
    errorText += `**–û–ø–∏—Å–∞–Ω–∏–µ:** –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å Telegram. \`${e.message}\`\n`;
  } else {
    errorText += `**–¢–∏–ø –æ—à–∏–±–∫–∏:** –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞\n`;
    errorText += `**–û–ø–∏—Å–∞–Ω–∏–µ:** \`${e.message}\`\n`;
  }

  errorText += `\n*–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏:*\n`;
  errorText += `\`\`\`json\n${JSON.stringify(ctx.update, null, 2)}\n\`\`\``;

  try {
    await bot.api.sendMessage(ADMIN_CHAT_ID, errorText, { parse_mode: 'Markdown' });
  } catch (sendError) {
    console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É:', sendError);
  }
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async function main() {
  await bot.start();
}

main().catch(console.error);
