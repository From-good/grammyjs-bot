require('dotenv').config();
const { Bot, GrammyError, HttpError, Keyboard, InlineKeyboard } = require('grammy');
const { session } = require('grammy');

const MAX_FILE_SIZE_BYTES = 20 * 1024 * 1024;
const BOT_API_KEY = process.env.BOT_API_KEY;
const ADMIN_CHAT_ID = Number(process.env.ADMIN_CHAT_ID);

if (!BOT_API_KEY) {
    throw new Error('BOT_API_KEY –Ω–µ –∑–∞–¥–∞–Ω –≤ .env —Ñ–∞–π–ª–µ.');
}
if (isNaN(ADMIN_CHAT_ID)) {
    throw new Error('ADMIN_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º –≤ .env —Ñ–∞–π–ª–µ.');
}

const bot = new Bot(BOT_API_KEY);

bot.use(session({
    initial: () => ({ isFirstMessageSent: false }),
}));

const mainKeyboard = new Keyboard()
    .text('–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç üåê')
    .row()
    .text('–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã üìû')
    .resized()
    .persistent();

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
const sendInitialMessage = async (ctx) => {
    if (!ctx.session.isFirstMessageSent) {
        await ctx.reply('–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! –ú—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏. üôè');
        ctx.session.isFirstMessageSent = true;
    }
};

const getUserInfo = (ctx) => {
    const userId = ctx.from?.id;
    const userName = ctx.from?.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
    return { userId, userName };
};

const checkFileSize = async (ctx, file) => {
    if (file.file_size > MAX_FILE_SIZE_BYTES) {
        await ctx.reply(`–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. üò• –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ ‚Äî ${MAX_FILE_SIZE_BYTES / 1024 / 1024} –ú–ë.`);
        return false;
    }
    return true;
};

// --- –û–°–ù–û–í–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ---

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.command('start', async (ctx) => {
    await ctx.reply('–ü—Ä–∏–≤–µ—Ç üëã! –ù–∞–ø–∏—à–∏ –Ω–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω—É–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.', {
        reply_markup: mainKeyboard
    });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç"
bot.hears('–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç üåê', async (ctx) => {
    await ctx.reply('–û—Ç–ª–∏—á–Ω–æ! –í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –Ω–∞—à —Å–∞–π—Ç: https://fromgood.ru');
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã"
bot.hears('–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã üìû', async (ctx) => {
    await ctx.reply('–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã: info@fromgood.ru, +7 (495) 973-31-39');
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline-–∫–Ω–æ–ø–∫—É "–û—Ç–≤–µ—Ç–∏—Ç—å"
bot.callbackQuery(/^reply_to_(\d+)$/, async (ctx) => {
    const targetUserId = Number(ctx.match[1]);
    await ctx.answerCallbackQuery();
    await ctx.reply(`–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (ID: ${targetUserId}):`);
});

---

### –õ–æ–≥–∏–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ –∫–ª–∏–µ–Ω—Ç–æ–≤

---

// –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
bot.on('message:text').filter(
    (ctx) => ctx.from?.id === ADMIN_CHAT_ID && ctx.message.reply_to_message?.from?.id === bot.botInfo.id,
    async (ctx) => {
        const repliedMessageText = ctx.message.reply_to_message.text;
        const userIdMatch = repliedMessageText.match(/\(ID: (\d+)\)/);
        const targetUserId = userIdMatch && Number(userIdMatch[1]);
        
        if (userIdMatch && !isNaN(targetUserId)) {
            const messageToClient = ctx.message.text;
            try {
                await bot.api.sendMessage(targetUserId, `FromGood:\n\n${messageToClient}`);
                await ctx.reply('–û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É. ‚úÖ', {
                    reply_to_message_id: ctx.message.message_id
                });
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –∫–ª–∏–µ–Ω—Ç—É:', error);
                await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É. ‚ùå –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.', {
                    reply_to_message_id: ctx.message.message_id
                });
            }
        } else {
            await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –æ—Ç–≤–µ—á–∞–µ—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å–æ–¥–µ—Ä–∂–∞—â–µ–µ ID –∫–ª–∏–µ–Ω—Ç–∞.', {
                reply_to_message_id: ctx.message.message_id
            });
        }
    }
);

// –õ–æ–≥–∏–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
// –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –∫—Ä–æ–º–µ —Ç–µ—Ö, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
bot.on('message:text').filter(
    (ctx) => ctx.from?.id !== ADMIN_CHAT_ID,
    async (ctx) => {
        const { userId, userName } = getUserInfo(ctx);
        try {
            await sendInitialMessage(ctx);
            const messageToAdmin = `‚úçÔ∏è –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${userName} (ID: ${userId}):\n\n
