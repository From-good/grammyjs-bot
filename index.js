require('dotenv').config();
const { Bot, GrammyError, HttpError, Keyboard, InlineKeyboard } = require('grammy');
const { session } = require('grammy');

const MAX_FILE_SIZE_BYTES = 20 * 1024 * 1024;
const BOT_API_KEY = process.env.BOT_API_KEY;
const ADMIN_CHAT_ID = Number(process.env.ADMIN_CHAT_ID);

if (!BOT_API_KEY) {
  throw new Error('BOT_API_KEY –Ω–µ –∑–∞–¥–∞–Ω –≤ .env —Ñ–∞–π–ª–µ.');
}
if (isNaN(ADMIN_CHAT_ID)) {
  throw new Error('ADMIN_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º –≤ .env —Ñ–∞–π–ª–µ.');
}

const bot = new Bot(BOT_API_KEY);

bot.use(session({
    initial: () => ({ isFirstMessageSent: false }),
}));

const mainKeyboard = new Keyboard()
  .text('–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç üåê')
  .row()
  .text('–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã üìû')
  .resized()
  .persistent();

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
const sendInitialMessage = async (ctx) => {
  if (!ctx.session.isFirstMessageSent) {
    await ctx.reply('–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! –ú—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏. üôè');
    ctx.session.isFirstMessageSent = true;
  }
};

const getUserInfo = (ctx) => {
  const userId = ctx.from?.id;
  const userName = ctx.from?.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
  return { userId, userName };
};

const checkFileSize = async (ctx, file) => {
  if (file.file_size > MAX_FILE_SIZE_BYTES) {
    await ctx.reply(`–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. üò• –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ ‚Äî ${MAX_FILE_SIZE_BYTES / 1024 / 1024} –ú–ë.`);
    return false;
  }
  return true;
};

// ---- MIDDLEWARE ----

// Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
const adminReplyMiddleware = async (ctx, next) => {
  const isReplyToBot = ctx.message.reply_to_message?.from?.id === bot.botInfo.id;
  
  if (ctx.from?.id === ADMIN_CHAT_ID && isReplyToBot) {
    const repliedMessageText = ctx.message.reply_to_message.text;
    const userIdMatch = repliedMessageText.match(/\(ID: (\d+)\)/);
    const targetUserId = userIdMatch && Number(userIdMatch[1]);
    
    if (userIdMatch && !isNaN(targetUserId)) {
      const messageToClient = ctx.message.text;
      try {
        await bot.api.sendMessage(targetUserId, `FromGood:\n\n${messageToClient}`);
        await ctx.reply('–û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É. ‚úÖ', {
          reply_to_message_id: ctx.message.message_id
        });
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –∫–ª–∏–µ–Ω—Ç—É:', error);
        await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É. ‚ùå –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.', {
          reply_to_message_id: ctx.message.message_id
        });
      }
    } else {
      await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –æ—Ç–≤–µ—á–∞–µ—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å–æ–¥–µ—Ä–∂–∞—â–µ–µ ID –∫–ª–∏–µ–Ω—Ç–∞.', {
        reply_to_message_id: ctx.message.message_id
      });
    }
  } else {
    await next(); // –ü–µ—Ä–µ–¥–∞—ë–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–º—É middleware
  }
};

// Middleware –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤
const clientMessageMiddleware = async (ctx, next) => {
  const { userId, userName } = getUserInfo(ctx);
  
  if (userId !== ADMIN_CHAT_ID) { // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —ç—Ç–æ –Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∞
    try {
      await sendInitialMessage(ctx);
      const messageToAdmin = `‚úçÔ∏è –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${userName} (ID: ${userId}):\n\n"${ctx.message.text}"`;
      const inlineKeyboard = new InlineKeyboard().text('–û—Ç–≤–µ—Ç–∏—Ç—å', `reply_to_${userId}`);
      
      await bot.api.sendMessage(ADMIN_CHAT_ID, messageToAdmin, {
        reply_markup: inlineKeyboard
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É:', error);
      await ctx.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. üòî –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }
  await next();
};

// --- –û–°–ù–û–í–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ---

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.command('start', async (ctx) => {
  await ctx.reply('–ü—Ä–∏–≤–µ—Ç üëã! –ù–∞–ø–∏—à–∏ –Ω–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω—É–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.', {
    reply_markup: mainKeyboard
  });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç"
bot.hears('–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç üåê', async (ctx) => {
  await ctx.reply('–û—Ç–ª–∏—á–Ω–æ! –í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –Ω–∞—à —Å–∞–π—Ç: https://fromgood.ru');
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã"
bot.hears('–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã üìû', async (ctx) => {
  await ctx.reply('–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã: info@fromgood.ru, +7 (495) 973-31-39');
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline-–∫–Ω–æ–ø–∫—É "–û—Ç–≤–µ—Ç–∏—Ç—å"
bot.callbackQuery(/^reply_to_(\d+)$/, async (ctx) => {
    const targetUserId = Number(ctx.match[1]);
    await ctx.answerCallbackQuery();
    await ctx.reply(`–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (ID: ${targetUserId}):`);
});

// –ü—Ä–∏–º–µ–Ω—è–µ–º middleware –∫ —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏—è–º
bot.on('message:text', adminReplyMiddleware, clientMessageMiddleware);

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ (–æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–≥–∏–∫–∏)
bot.on('message:photo', async (ctx) => {
  const photo = ctx.message.photo[ctx.message.photo.length - 1];
  if (!await checkFileSize(ctx, photo)) return;
  const { userId, userName } = getUserInfo(ctx);
  const inlineKeyboard = new InlineKeyboard().text('–û—Ç–≤–µ—Ç–∏—Ç—å', `reply_to_${userId}`);
  
  await sendInitialMessage(ctx);
  const caption = `‚úçÔ∏è –ù–æ–≤–æ–µ —Ñ–æ—Ç–æ –æ—Ç ${userName} (ID: ${userId}):\n\n${ctx.message.caption || ''}`.trim();
  await bot.api.sendPhoto(ADMIN_CHAT_ID, photo.file_id, { caption, reply_markup: inlineKeyboard });
});

bot.on('message:document', async (ctx) => {
  const document = ctx.message.document;
  if (!await checkFileSize(ctx, document)) return;
  const { userId, userName } = getUserInfo(ctx);
  const inlineKeyboard = new InlineKeyboard().text('–û—Ç–≤–µ—Ç–∏—Ç—å', `reply_to_${userId}`);
  
  await sendInitialMessage(ctx);
  const caption = `‚úçÔ∏è –ù–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –æ—Ç ${userName} (ID: ${userId}):\n\n${ctx.message.caption || ''}`.trim();
  await bot.api.sendDocument(ADMIN_CHAT_ID, document.file_id, { caption, reply_markup: inlineKeyboard });
});

bot.on('message:video', async (ctx) => {
  const video = ctx.message.video;
  if (!await checkFileSize(ctx, video)) return;
  const { userId, userName } = getUserInfo(ctx);
  const inlineKeyboard = new InlineKeyboard().text('–û—Ç–≤–µ—Ç–∏—Ç—å', `reply_to_${userId}`);
  
  await sendInitialMessage(ctx);
  const caption = `‚úçÔ∏è –ù–æ–≤–æ–µ –≤–∏–¥–µ–æ –æ—Ç ${userName} (ID: ${userId}):\n\n${ctx.message.caption || ''}`.trim();
  await bot.api.sendVideo(ADMIN_CHAT_ID, video.file_id, { caption, reply_markup: inlineKeyboard });
});

bot.on('message:sticker', async (ctx) => {
  const sticker = ctx.message.sticker;
  if (!await checkFileSize(ctx, sticker)) return;
  const { userId, userName } = getUserInfo(ctx);
  const inlineKeyboard = new InlineKeyboard().text('–û—Ç–≤–µ—Ç–∏—Ç—å', `reply_to_${userId}`);
  
  await sendInitialMessage(ctx);
  const messageToAdmin = `‚úçÔ∏è –ù–æ–≤—ã–π —Å—Ç–∏–∫–µ—Ä –æ—Ç ${userName} (ID: ${userId})`;
  await bot.api.sendMessage(ADMIN_CHAT_ID, messageToAdmin, { reply_markup: inlineKeyboard });
  await bot.api.sendSticker(ADMIN_CHAT_ID, sticker.file_id);
});

bot.on('message:voice', async (ctx) => {
  const voice = ctx.message.voice;
  if (!await checkFileSize(ctx, voice)) return;
  const { userId, userName } = getUserInfo(ctx);
  const inlineKeyboard = new InlineKeyboard().text('–û—Ç–≤–µ—Ç–∏—Ç—å', `reply_to_${userId}`);
  
  await sendInitialMessage(ctx);
  const caption = `‚úçÔ∏è –ù–æ–≤–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${userName} (ID: ${userId})`;
  await bot.api.sendVoice(ADMIN_CHAT_ID, voice.file_id, { caption, reply_markup: inlineKeyboard });
});

bot.on('message:video_note', async (ctx) => {
  const videoNote = ctx.message.video_note;
  if (!await checkFileSize(ctx, videoNote)) return;
  const { userId, userName } = getUserInfo(ctx);
  const inlineKeyboard = new InlineKeyboard().text('–û—Ç–≤–µ—Ç–∏—Ç—å', `reply_to_${userId}`);
  
  await sendInitialMessage(ctx);
  const caption = `‚úçÔ∏è –ù–æ–≤–∞—è –≤–∏–¥–µ–æ–∑–∞–º–µ—Ç–∫–∞ –æ—Ç ${userName} (ID: ${userId})`;
  await bot.api.sendVideoNote(ADMIN_CHAT_ID, videoNote.file_id, { caption, reply_markup: inlineKeyboard });
});

bot.on('message:animation', async (ctx) => {
  const animation = ctx.message.animation;
  if (!await checkFileSize(ctx, animation)) return;
  const { userId, userName } = getUserInfo(ctx);
  const inlineKeyboard = new InlineKeyboard().text('–û—Ç–≤–µ—Ç–∏—Ç—å', `reply_to_${userId}`);
  
  await sendInitialMessage(ctx);
  const caption = `‚úçÔ∏è –ù–æ–≤–∞—è GIF-–∞–Ω–∏–º–∞—Ü–∏—è –æ—Ç ${userName} (ID: ${userId}):\n\n${ctx.message.caption || ''}`.trim();
  await bot.api.sendAnimation(ADMIN_CHAT_ID, animation.file_id, { caption, reply_markup: inlineKeyboard });
});

bot.on('message:audio', async (ctx) => {
  const audio = ctx.message.audio;
  if (!await checkFileSize(ctx, audio)) return;
  const { userId, userName } = getUserInfo(ctx);
  const inlineKeyboard = new InlineKeyboard().text('–û—Ç–≤–µ—Ç–∏—Ç—å', `reply_to_${userId}`);
  
  await sendInitialMessage(ctx);
  const caption = `‚úçÔ∏è –ù–æ–≤—ã–π –∞—É–¥–∏–æ—Ñ–∞–π–ª –æ—Ç ${userName} (ID: ${userId}):\n\n${ctx.message.caption || ''}`.trim();
  await bot.api.sendAudio(ADMIN_CHAT_ID, audio.file_id, { caption, reply_markup: inlineKeyboard });
});


// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
bot.catch((err) => {
  const ctx = err.ctx;
  console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ${ctx.update.update_id}:`);
  const e = err.error;
  if (e instanceof GrammyError) {
    console.error("–û—à–∏–±–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ:", e.description);
  } else if (e instanceof HttpError) {
    console.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å Telegram:", e);
  } else {
    console.error("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞:", e);
  }
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async function main() {
  await bot.start();
}

main().catch(console.error);
